#!/bin/bash
# xentry - originally xDaily from the Peppermint distro.
# Adapted to lilidog use by sleekmason 11-21-2022
### Check for live and if so, exit.
full_fs=$(df ~ | tail -1 | awk '{print $1;}')  # find partition
fs=$(basename "$full_fs")
if grep -q "$fs" /proc/partitions; then
if : >/dev/tcp/8.8.8.8/53; then

PROGNAME="xentry"
[ "$USER" != "root" ] && 
   echo -e "[0;31m\t$PROGNAME must be run as root, or with 'sudo $PROGNAME'[0m" && exit

### Our options are going to be
#    = "full output to the terminal, no stopping."
# -i = "interactive"
# -q = "interactive but suppressed output"
OPTIND="0"
for i in  _quiet _interactive ; do unset -v $i ; done

while getopts 'iq' OPTION; do
    case "$OPTION" in
      i)
	_interactive="yes"
	echo ""
	echo -e " [0;32m--------------------------------------------------[0m"
	echo ""
	echo -e " [0;32m\n Entering interactive script to customize Beardog.\n[0m"
	echo -e " [0;33m--------------------------------------------------[0m"
	echo -e " [0;33m\n Please use letters 'y' or 'n' for selections.\n[0m"
	echo -e " [0;33m--------------------------------------------------[0m"
	echo ""
	break
      ;;

      q)
	_quiet="yes"
	echo -e " [0;32mEntering interactive mode, without verbose output.\n[0m"
	break
      ;;

      ?)
	echo "Usage: $(basename ${PROGNAME}) [-i = interactive] [-q = suppressed ouput]"
	return 1
      ;;
  esac
done

[ "$(which nala)" ] && PkgMgr="nala" || PkgMgr="apt"

see_it() {
	[ "$_interactive" = "yes" ] && ( read -r -n1 -p " $_msg \"Y/n\" " answ
	[ -z "$answ" ] || [ "$answ" = "y" ] || [ "$answ" = "Y" ] && echo &&
	do_it &&
	echo -e " [0;32m$_msg - Completed.\n[0m" ||
	echo -e "[0;32m\r $_msg - Skipped.\n[0m" )
}

no_see() {
	[ "$_quiet" = "yes"       ] && ( read -r -n1 -p " $_msg \"Y/n\" " answ
	[ -z "$answ" ] || [ "$answ" = "y" ] || [ "$answ" = "Y" ] && echo &&
	do_it > /dev/null &&
	echo -e " [0;32m$_msg - Completed.\n[0m" ||
	echo -e "[0;32m\r $_msg - Skipped.\n[0m" )
}

run_it() {
	[ "$_interactive" != "yes" ] && [ "$_quiet" != "yes" ] && (
	echo -e "\n $_msg" &&
	do_it &&
	echo -e "[0;32m $_msg - Completed.[0m" )
}

# Begin xDaily command functions 
_update() {
      _msg="Update current packages before proceeding"
      do_it() { 
		[ "$_quiet" != "yes" ] &&
		apt-get update && apt-get -y upgrade
}
	see_it
	no_see
	run_it
}

_add_lightdm() {
      _msg="Add lightdm? (choose 'n' if wanting slick-greeter instead.)"
      do_it() { apt-get update && apt-get install -y lightdm lightdm-gtk-greeter-settings &&
		        cp -af /usr/share/lilidog/extras/lightdm/ /usr/share
		        ## Toggle to lightdm-greeter
                sed -i '/greeter-session=.*/d' "/etc/lightdm/lightdm.conf"
                sed -i '108a greeter-session=lightdm-greeter' "/etc/lightdm/lightdm.conf"
                ## Menu additions
		        sed -i '/Lightdm,             gksudo lightdm-gtk-greeter-settings,                                  lightdm-gtk-greeter-settings/d' /home/"${SUDO_USER}"/.config/jgmenu/prepend.csv
                sed -i '/^Keybinds/a Lightdm,             gksudo lightdm-gtk-greeter-settings,                                  lightdm-gtk-greeter-settings' /home/"${SUDO_USER}"/.config/jgmenu/prepend.csv
		        sed -i '/Auto Login,          lightdm-autologin,                             preferences-desktop-personal/d' /home/"${SUDO_USER}"/.config/jgmenu/prepend.csv
                sed -i '/Tint2 Toggle/a Auto Login,          lightdm-autologin,                             preferences-desktop-personal' /home/"${SUDO_USER}"/.config/jgmenu/prepend.csv
                 if [[ $(command -v lightdm) ]]; then
                   if grep -Fxq 'exec "$session"' /home/"${SUDO_USER}"/.xsessionrc; then
                   sed -i 's/^exec "$session"/#exec "$session"/' /home/"${SUDO_USER}"/.xsessionrc
                   fi
                 fi
		        sed -i 's/^exec startx/#exec startx/g' /home/"${SUDO_USER}"/.profile ;}
      
        see_it
        no_see
        run_it
}

_add_slick() {
      _msg="Add lightdm slick-greeter?"
      do_it() { apt-get update && apt-get install -y lightdm lightdm-settings slick-greeter &&
		        cp -f /usr/share/lilidog/extras/slick-lightdm/slick-greeter.conf /etc/lightdm
                cp -f /usr/share/lilidog/extras/slick-lightdm/50-slick-greeter.conf /usr/share/lightdm/lightdm.conf.d
		        ## Toggle to lightdm-greeter
                sed -i '/greeter-session=.*/d' "/etc/lightdm/lightdm.conf"
                sed -i '108a greeter-session=slick-greeter' "/etc/lightdm/lightdm.conf"
                ## Menu additions
		        sed -i '/Slickdm,             gksudo lightdm-settings,                                  lightdm-settings/d' /home/"${SUDO_USER}"/.config/jgmenu/prepend.csv
                sed -i '/^Keybinds/a Slickdm,             gksudo lightdm-settings,                                  lightdm-settings' /home/"${SUDO_USER}"/.config/jgmenu/prepend.csv
		        sed -i '/Auto Login,          lightdm-autologin,                             preferences-desktop-personal/d' /home/"${SUDO_USER}"/.config/jgmenu/prepend.csv
                sed -i '/Tint2 Toggle/a Auto Login,          lightdm-autologin,                             preferences-desktop-personal' /home/"${SUDO_USER}"/.config/jgmenu/prepend.csv
                 if [[ $(command -v lightdm) ]]; then
                   if grep -Fxq 'exec "$session"' /home/"${SUDO_USER}"/.xsessionrc; then
                   sed -i 's/^exec "$session"/#exec "$session"/' /home/"${SUDO_USER}"/.xsessionrc
                   fi
                 fi
		        sed -i 's/^exec startx/#exec startx/g' /home/"${SUDO_USER}"/.profile ;}
      
        see_it
        no_see
        run_it
}



_add_jgmenu() {
      _msg=" Install jgmenu to replace the Openbox default?"
      do_it() { cd /tmp &&
		        wget https://raw.githubusercontent.com/sleekmason/packages/master/jgmenu.zip --show-progress -q &&
		        wget https://raw.githubusercontent.com/sleekmason/packages/master/jgmenu_4.4.0-1_amd64.deb --show-progress -q &&
                apt-get update && apt-get install --install-recommends -y ./jgmenu_4.4.0-1_amd64.deb python3-gi gir1.2-gtk-3.0 &&
                unzip -q jgmenu.zip &&
                cp -r /tmp/jgmenu/jgmenu /home/"${SUDO_USER}"/.config &&
                cp -a /tmp/jgmenu/scripts/. /usr/local/bin/ &&
		        mv /home/"${SUDO_USER}"/.config/openbox/rc.xml /home/"${SUDO_USER}"/.config/openbox/rc.xml.bak &&
		        cp /tmp/jgmenu/openbox/rc.xml /home/"${SUDO_USER}"/.config/openbox &&
		        chown "${SUDO_USER}":"${SUDO_USER}" /home/"${SUDO_USER}"/.config/openbox/rc.xml
		        chown -R "${SUDO_USER}":"${SUDO_USER}" /home/"${SUDO_USER}"/.config/jgmenu
		        if egrep -q "Jgmenu" /usr/local/bin/beardog-themer; then
                exit
                else
                sed -i '/Openbox/i    --field="                  Jgmenu Icons!jgmenu":FBTN "jg-icon-changer" \\' /usr/local/bin/beardog-themer
                sed -i '/Openbox/i    --field="                Jgmenu Theme!jgmenu":FBTN "jg-menu-theme" \\' /usr/local/bin/beardog-themer
                fi
                if xhost >& /dev/null ; then openbox --reconfigure
                else echo "Not currently in X. Openbox restart deferred" ; fi }
        see_it
        no_see
        run_it
}

_add_notifications() {
      _msg="Install Dunst for notifications with sound options?"
      do_it() { cd /tmp &&
		  wget https://raw.githubusercontent.com/sleekmason/packages/master/dunst.zip --show-progress -q &&
          unzip -q dunst.zip &&
          cp -r /tmp/dunst/dunst /home/"${SUDO_USER}"/.config &&
          cp -a /tmp/dunst/scripts/. /usr/local/bin/ &&
          chown -R "${SUDO_USER}":"${SUDO_USER}" /home/"${SUDO_USER}"/.config/dunst &&
          apt-get update && apt-get install -y dunst
          if egrep -q "Sounds" /usr/local/bin/beardog-themer; then
                exit
                else
		        sed -i '/System/i    --field="                           Sounds!audio-headphones":FBTN "notification-sounds" \\' /usr/local/bin/beardog-themer ; fi }
        see_it
        no_see
        run_it
}

_add_conky() {
      _msg="Install Conky with custom configurations?"
      do_it() { cd /tmp &&
		  rm -fr /tmp/conky*
		  wget https://raw.githubusercontent.com/sleekmason/packages/master/conky-bear-bookworm2.zip --show-progress -q &&
		        unzip -q conky-bear-bookworm2.zip
		        if test -f /home/"${SUDO_USER}"/.config/conky; then
		        mv /home/"${SUDO_USER}"/.config/conky /home/"${SUDO_USER}"/.config/conky.bak &&
		        cp -r /tmp/conky /home/"${SUDO_USER}"/.config
                else                
                cp -r /tmp/conky /home/"${SUDO_USER}"/.config              
		        fi
		        chown -R "${SUDO_USER}":"${SUDO_USER}" /home/"${SUDO_USER}"/.config/conky &&
		        apt-get update && apt-get install -y conky-all fortunes fortune-mod &&
		        if test -e /home/"${SUDO_USER}"/.config/conky; then
    if ! grep -wq "conky-restart-list" /home/"${SUDO_USER}"/.config/openbox/autostart; then
		{
		echo ""
		echo '## Start conkys on login if present'	
		echo 'if test -f  "$HOME/.config/conky/scripts/conky-restart-list"; then'
		echo '"$HOME/.config/conky/scripts/conky-restart-list" >/dev/null 2>&1'
		echo 'fi';} | tee -a /home/"${SUDO_USER}"/.config/openbox/autostart > /dev/null
		fi
	fi
                	sed -i '/Conky,               conky-toggle,                                  preferences-desktop-personal/d' /home/"${SUDO_USER}"/.config/jgmenu/prepend.csv
	                sed -i '/Xkill/i Conky,               conky-toggle,                                  preferences-desktop-personal' /home/"${SUDO_USER}"/.config/jgmenu/prepend.csv ;}
        see_it
        no_see
        run_it
}

_add_transparency() {
      _msg="Install transparency with picom and enable at login?"
      do_it() { apt-get update && apt-get install --install-recommends -y picom &&
		        cp /usr/share/lilidog/extras/picom.conf /home/"${SUDO_USER}"/.config
		        sed -i '/tint2/i picom &' /home/"${SUDO_USER}"/.config/openbox/autostart
		        chown "${SUDO_USER}":"${SUDO_USER}" /home/"${SUDO_USER}"/.config/picom.conf ;}
        see_it
        no_see
        run_it
}

_add_installers() {
      _msg="Add the Lilidog installers for ease of use?"
      do_it() { cd /tmp &&
		  wget https://raw.githubusercontent.com/sleekmason/packages/master/ld-installers.zip --show-progress -q &&
		  unzip -q ld-installers.zip &&
		  cp -a /tmp/ld-installers/. /usr/local/bin/
		  if egrep -q "Installers" /usr/local/bin/beardog-themer; then
                exit
                else
                sed -i '/Apt Update/a       --field="            Installers!preferences-system":FBTN "ld-installers" \\' /usr/local/bin/tint2-updates
                sed -i '/Openbox/i    --field="                        Installers!preferences-system":FBTN "ld-installers" \\' /usr/local/bin/beardog-themer ; fi }
        see_it
        no_see
        run_it
}

_remove_packages() {
      _msg="Remove Cryptsetup and related packages?"
      do_it() { apt-get remove -y cryptsetup cryptsetup-initramfs cryptsetup-bin ;}
        see_it
        no_see
        run_it
}

_add_backports() {
      _msg="Add backports repositories and run Apt to update?"
      do_it() { echo 'deb http://deb.debian.org/debian bookworm-backports main' | tee /etc/apt/sources.list.d/bookworm-backports.list &&
		        apt-get update ;}
        see_it
        no_see
        run_it
}

_upgrade_kernel() {
      _msg="Install backports kernel? (Also adds repositories.)"
      do_it() { echo 'deb http://deb.debian.org/debian bookworm-backports main' | tee /etc/apt/sources.list.d/bookworm-backports.list &&
		        apt-get update && apt-get install -y -t bookworm-backports linux-image-amd64/bookworm-backports linux-headers-amd64/bookworm-backports firmware-linux ;}
        see_it
        no_see
        run_it
}

_sourcechanger() {
      _msg="Use netselect-apt to find a faster debian mirror?"
      do_it() { apt install -y netselect-apt
		        rm -rf /tmp/sourcechanger
		        mkdir /tmp/sourcechanger
		          if [ ! -e "/etc/apt/sources.list-original.bak" ]; then
                     cp -f "/etc/apt/sources.list" "/etc/apt/sources.list-original.bak"
                  fi
                  if [ -e "/etc/apt/sources.list-original.bak" ]; then
                     cp -f "/etc/apt/sources.list-original.bak" "/etc/apt/sources.list"
                  fi
                netselect-apt -o /tmp/sourcechanger/sources.list
                grep -o -m1 'http[s]\?://[^ ]\+' /tmp/sourcechanger/sources.list > /tmp/sourcechanger/sources.txt
                sed -i 's/.$//' /tmp/sourcechanger/sources.txt
                  if grep -q "http://deb.debian.org/debian" <(head -n 4 "/etc/apt/sources.list-original.bak"); then
                     sed -i -e "s/http:\/\/deb.debian.org\/debian/$(sed 's:/:\\/:g' /tmp/sourcechanger/sources.txt)/" /etc/apt/sources.list
                  elif grep -q "https://deb.debian.org/debian" <(head -n 4 "/etc/apt/sources.list-original.bak"); then
                     sed -i -e "s/https:\/\/deb.debian.org\/debian/$(sed 's:/:\\/:g' /tmp/sourcechanger/sources.txt)/" /etc/apt/sources.list
                  else
                     echo "   [0;31mOriginal debian mirrors not found. exiting.[0m"
                  exit 0
                  fi
                  if apt-get update -eany; then
                     echo
                     echo "   [0;32mSuccess! Enjoy your new debian mirror.[0m"
                     echo
                  else
                     echo
                     echo "   [0;31mSomething is not quite right - defaulting to original sources.list.[0m"
                     echo
                     sleep 2
                     cp -f "/etc/apt/sources.list-original.bak" "/etc/apt/sources.list"
                     apt update
                  fi ;}
        see_it
        no_see
        run_it
}

_osprober() {
      _msg="Enable osprober to find other distro entries in grub?"
      do_it() { sed -i 's/^#GRUB_DISABLE_OS_PROBER=false/GRUB_DISABLE_OS_PROBER=false/g' "/etc/default/grub" &&
		        update-grub ;}
        see_it
        no_see
        run_it
}

_firmware() {
      _msg="Install isenkram-cli to check for missing firmware?"
      do_it() { apt update && sudo apt install -y isenkram-cli &&
		isenkram-autoinstall-firmware ;}
        see_it
        no_see
        run_it
}

_reboot() {
      _msg="Reboot? - After kernel or lightdm installation."
      do_it() { sed -i '/welcome-backend.sh.*/d' /home/"${SUDO_USER}"/.config/openbox/autostart
		  if ! grep hypervisor /proc/cpuinfo ; then
          sed -i '/vmrestore.*/d' /home/"${SUDO_USER}"/.config/openbox/autostart
          fi
          reboot ;}
        see_it
        no_see
        run_it
}

if grep -q "#GRUB_DISABLE_OS_PROBER=false" "/etc/default/grub"; then
_update
#_add_jgmenu
#_add_notifications
#_add_transparency
#_add_installers
_remove_packages
_add_backports
_upgrade_kernel
_sourcechanger
_add_lightdm
_add_slick
_add_conky
_osprober
_firmware
_reboot
sed -i '/welcome-backend.sh.*/d' /home/"${SUDO_USER}"/.config/openbox/autostart
if ! grep hypervisor /proc/cpuinfo ; then
sed -i '/vmrestore.*/d' /home/"${SUDO_USER}"/.config/openbox/autostart
fi
else
_update
#_add_jgmenu
#_add_notifications
#_add_transparency
#_add_installers
_remove_packages
_add_backports
_upgrade_kernel
_sourcechanger
_add_lightdm
_add_slick
_add_conky
_firmware
_reboot
sed -i '/welcome-backend.sh.*/d' /home/"${SUDO_USER}"/.config/openbox/autostart
if ! grep hypervisor /proc/cpuinfo ; then
sed -i '/vmrestore.*/d' /home/"${SUDO_USER}"/.config/openbox/autostart
fi
fi
[ "$_interactive" = "yes" ]
echo
echo
echo $'\n\nPress any key to quit ...'; read -srn1
echo
else
echo ""
 echo "   [0;31m-----------------------------------------------------[0m"
 echo ""
 echo "   [0;33mNo Internet connection. Please connect and try again.[0m"
 echo ""
 echo "   [0;31m-----------------------------------------------------[0m"
echo ""
echo $'\n\nPress any key to quit ...'; read -srn1
fi
else
 echo "   [0;32m-------------------------------------------------------"
 echo ""
 echo "   Entry script cannot be used in a live environment."
 echo "   Install and try again!"
 echo ""
 echo "   -------------------------------------------------------[0m"
 echo ""
echo $'\n\nPress any key to quit ...'; read -srn1
 fi

